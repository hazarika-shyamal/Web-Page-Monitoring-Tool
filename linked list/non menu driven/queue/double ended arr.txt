#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

struct Deque {
    int arr[MAX_SIZE];
    int front;
    int rear;
};

void initializeDeque(struct Deque* dq) {
    dq->front = -1;
    dq->rear = -1;
}

int isFull(struct Deque* dq) {
    return ((dq->front == 0 && dq->rear == MAX_SIZE - 1) || (dq->front == dq->rear + 1));
}

int isEmpty(struct Deque* dq) {
    return (dq->front == -1);
}

void enqueueFront(struct Deque* dq, int data) {
    if (isFull(dq)) {
        printf("Deque is full! Cannot perform enqueue at the front operation.\n");
        return;
    }
    if (dq->front == -1) {
        dq->front = 0;
        dq->rear = 0;
    } else if (dq->front == 0) {
        dq->front = MAX_SIZE - 1;
    } else {
        dq->front--;
    }
    dq->arr[dq->front] = data;
    printf("Enqueued element at the front: %d\n", data);
}

void enqueueRear(struct Deque* dq, int data) {
    if (isFull(dq)) {
        printf("Deque is full! Cannot perform enqueue at the rear operation.\n");
        return;
    }
    if (dq->front == -1) {
        dq->front = 0;
        dq->rear = 0;
    } else if (dq->rear == MAX_SIZE - 1) {
        dq->rear = 0;
    } else {
        dq->rear++;
    }
    dq->arr[dq->rear] = data;
    printf("Enqueued element at the rear: %d\n", data);
}

void dequeueFront(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty! Cannot perform dequeue from the front operation.\n");
        return;
    }
    printf("Dequeued element from the front: %d\n", dq->arr[dq->front]);
    if (dq->front == dq->rear) {
        dq->front = -1;
        dq->rear = -1;
    } else if (dq->front == MAX_SIZE - 1) {
        dq->front = 0;
    } else {
        dq->front++;
    }
}

void dequeueRear(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty! Cannot perform dequeue from the rear operation.\n");
        return;
    }
    printf("Dequeued element from the rear: %d\n", dq->arr[dq->rear]);
    if (dq->front == dq->rear) {
        dq->front = -1;
        dq->rear = -1;
    } else if (dq->rear == 0) {
        dq->rear = MAX_SIZE - 1;
    } else {
        dq->rear--;
    }
}

int getFront(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty! Cannot get element from the front.\n");
        return -1;
    }
    return dq->arr[dq->front];
}

int getRear(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty! Cannot get element from the rear.\n");
        return -1;
    }
    return dq->arr[dq->rear];
}

void display(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty!\n");
        return;
    }
    printf("Deque elements:\n");
    if (dq->front <= dq->rear) {
        for (int i = dq->front; i <= dq->rear; i++) {
            printf("%d ", dq->arr[i]);
        }
    } else {
        for (int i = dq->front; i < MAX_SIZE; i++) {
            printf("%d ", dq->arr[i]);
        }
        for (int i = 0; i <= dq->rear; i++) {
            printf("%d ", dq->arr[i]);
        }
    }
    printf("\n");
}

int main() {
    struct Deque dq;
    initializeDeque(&dq);

    enqueueFront(&dq, 10);
    enqueueFront(&dq, 20);
    enqueueRear(&dq, 30);

    display(&dq);

    printf("Front element: %d\n", getFront(&dq));
    printf("Rear element: %d\n", getRear(&dq));

    dequeueFront(&dq);

    display(&dq);

    dequeueRear(&dq);

    display(&dq);

    printf("Front element: %d\n", getFront(&dq));
    printf("Rear element: %d\n", getRear(&dq));

    return 0;
}
