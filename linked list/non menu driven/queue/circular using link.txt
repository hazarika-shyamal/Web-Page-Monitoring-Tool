#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct CircularQueue {
    struct Node* front;
    struct Node* rear;
};

void initializeQueue(struct CircularQueue* queue) {
    queue->front = NULL;
    queue->rear = NULL;
}

int isEmpty(struct CircularQueue* queue) {
    return (queue->front == NULL);
}

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!");
        exit(0);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void enqueue(struct CircularQueue* queue, int data) {
    struct Node* newNode = createNode(data);
    if (isEmpty(queue)) {
        queue->front = newNode;
        queue->rear = newNode;
        newNode->next = newNode;  // Point to itself for circularity
    } else {
        newNode->next = queue->front;
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
    printf("Enqueued element: %d\n", data);
}

void dequeue(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty! Cannot perform dequeue operation.\n");
        return;
    }
    int dequeuedElement = queue->front->data;
    if (queue->front == queue->rear) {
        free(queue->front);
        queue->front = NULL;
        queue->rear = NULL;
    } else {
        struct Node* temp = queue->front;
        queue->front = queue->front->next;
        queue->rear->next = queue->front;
        free(temp);
    }
    printf("Dequeued element: %d\n", dequeuedElement);
}

int peek(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty! Cannot perform peek operation.\n");
        return -1;
    }
    return queue->front->data;
}

int search(struct CircularQueue* queue, int key) {
    if (isEmpty(queue)) {
        printf("Queue is empty! Cannot perform search operation.\n");
        return -1;
    }
    struct Node* current = queue->front;
    int position = 1;
    do {
        if (current->data == key) {
            return position;
        }
        current = current->next;
        position++;
    } while (current != queue->front);
    return -1;
}

void display(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements: ");
    struct Node* current = queue->front;
    do {
        printf("%d ", current->data);
        current = current->next;
    } while (current != queue->front);
    printf("\n");
}

int main() {
    struct CircularQueue queue;
    initializeQueue(&queue);

    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);
    enqueue(&queue, 40);

    display(&queue);

    printf("Front element: %d\n", peek(&queue));

    dequeue(&queue);
    dequeue(&queue);

    display(&queue);

    printf("Front element: %d\n", peek(&queue));

    int searchKey = 20;
    int position = search(&queue, searchKey);
    if (position != -1) {
        printf("Element %d found at position %d\n", searchKey, position);
    } else {
        printf("Element %d not found\n", searchKey);
    }

    return 0;
}
