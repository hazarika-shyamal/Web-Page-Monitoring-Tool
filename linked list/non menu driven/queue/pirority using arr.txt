#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

struct PriorityQueue {
    int arr[MAX_SIZE];
    int priority[MAX_SIZE];
    int rear;
};

void initializeQueue(struct PriorityQueue* pq) {
    pq->rear = -1;
}

int isEmpty(struct PriorityQueue* pq) {
    return (pq->rear == -1);
}

int isFull(struct PriorityQueue* pq) {
    return (pq->rear == MAX_SIZE - 1);
}

void enqueue(struct PriorityQueue* pq, int data, int priority) {
    if (isFull(pq)) {
        printf("Priority Queue is full! Cannot perform enqueue operation.\n");
        return;
    }
    int position = pq->rear;
    while (position >= 0 && pq->priority[position] > priority) {
        pq->arr[position + 1] = pq->arr[position];
        pq->priority[position + 1] = pq->priority[position];
        position--;
    }
    pq->arr[position + 1] = data;
    pq->priority[position + 1] = priority;
    pq->rear++;
    printf("Enqueued element: %d with priority: %d\n", data, priority);
}

void dequeue(struct PriorityQueue* pq) {
    if (isEmpty(pq)) {
        printf("Priority Queue is empty! Cannot perform dequeue operation.\n");
        return;
    }
    int dequeuedElement = pq->arr[0];
    for (int i = 0; i < pq->rear; i++) {
        pq->arr[i] = pq->arr[i + 1];
        pq->priority[i] = pq->priority[i + 1];
    }
    pq->rear--;
    printf("Dequeued element: %d\n", dequeuedElement);
}

int peek(struct PriorityQueue* pq) {
    if (isEmpty(pq)) {
        printf("Priority Queue is empty! Cannot perform peek operation.\n");
        return -1;
    }
    return pq->arr[0];
}

int search(struct PriorityQueue* pq, int key) {
    if (isEmpty(pq)) {
        printf("Priority Queue is empty! Cannot perform search operation.\n");
        return -1;
    }
    for (int i = 0; i <= pq->rear; i++) {
        if (pq->arr[i] == key) {
            return (i + 1);
        }
    }
    return -1;
}

void display(struct PriorityQueue* pq) {
    if (isEmpty(pq)) {
        printf("Priority Queue is empty!\n");
        return;
    }
    printf("Priority Queue elements:\n");
    for (int i = 0; i <= pq->rear; i++) {
        printf("Data: %d, Priority: %d\n", pq->arr[i], pq->priority[i]);
    }
}

int main() {
    struct PriorityQueue pq;
    initializeQueue(&pq);

    enqueue(&pq, 10, 2);
    enqueue(&pq, 20, 1);
    enqueue(&pq, 30, 3);

    display(&pq);

    printf("Front element: %d\n", peek(&pq));

    dequeue(&pq);

    display(&pq);

    printf("Front element: %d\n", peek(&pq));

    int searchKey = 20;
    int position = search(&pq, searchKey);
    if (position != -1) {
        printf("Element %d found at position %d\n", searchKey, position);
    } else {
        printf("Element %d not found\n", searchKey);
    }

    return 0;
}
