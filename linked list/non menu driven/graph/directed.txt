#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

struct Graph {
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
    int numVertices;
};

void initializeGraph(struct Graph* graph, int numVertices) {
    graph->numVertices = numVertices;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph->adjacencyMatrix[i][j] = 0;
        }
    }
}

void addEdge(struct Graph* graph, int src, int dest) {
    if (src >= 0 && src < graph->numVertices && dest >= 0 && dest < graph->numVertices) {
        graph->adjacencyMatrix[src][dest] = 1;
    } else {
        printf("Invalid vertices!\n");
    }
}

void removeEdge(struct Graph* graph, int src, int dest) {
    if (src >= 0 && src < graph->numVertices && dest >= 0 && dest < graph->numVertices) {
        graph->adjacencyMatrix[src][dest] = 0;
    } else {
        printf("Invalid vertices!\n");
    }
}

int isEdge(struct Graph* graph, int src, int dest) {
    if (src >= 0 && src < graph->numVertices && dest >= 0 && dest < graph->numVertices) {
        return graph->adjacencyMatrix[src][dest];
    } else {
        printf("Invalid vertices!\n");
        return 0;
    }
}

void depthFirstSearch(struct Graph* graph, int startVertex, int visited[]) {
    visited[startVertex] = 1;
    printf("%d ", startVertex);

    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjacencyMatrix[startVertex][i] == 1 && visited[i] == 0) {
            depthFirstSearch(graph, i, visited);
        }
    }
}

void breadthFirstSearch(struct Graph* graph, int startVertex, int visited[]) {
    int queue[MAX_VERTICES];
    int front = 0;
    int rear = 0;

    visited[startVertex] = 1;
    printf("%d ", startVertex);
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];
        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjacencyMatrix[currentVertex][i] == 1 && visited[i] == 0) {
                visited[i] = 1;
                printf("%d ", i);
                queue[rear++] = i;
            }
        }
    }
}

int main() {
    struct Graph graph;
    int numVertices = 5;
    initializeGraph(&graph, numVertices);

    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 2, 4);
    addEdge(&graph, 3, 4);

    int visited[MAX_VERTICES] = {0};

    printf("Depth First Search: ");
    depthFirstSearch(&graph, 0, visited);
    printf("\n");

    for (int i = 0; i < numVertices; i++) {
        visited[i] = 0;
    }

    printf("Breadth First Search: ");
    breadthFirstSearch(&graph, 0, visited);
    printf("\n");

    return 0;
}
