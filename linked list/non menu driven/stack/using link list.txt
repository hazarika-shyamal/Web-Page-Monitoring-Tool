#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!");
        exit(0);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Stack {
    struct Node* top;
};

void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}

int isEmpty(struct Stack* stack) {
    return (stack->top == NULL);
}

void push(struct Stack* stack, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = stack->top;
    stack->top = newNode;
    printf("Pushed element: %d\n", data);
}

void pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty! Cannot perform pop operation.\n");
        return;
    }
    struct Node* temp = stack->top;
    stack->top = stack->top->next;
    int poppedElement = temp->data;
    free(temp);
    printf("Popped element: %d\n", poppedElement);
}

int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty! Cannot perform peek operation.\n");
        return -1;
    }
    return stack->top->data;
}

int search(struct Stack* stack, int key) {
    if (isEmpty(stack)) {
        printf("Stack is empty! Cannot perform search operation.\n");
        return -1;
    }
    struct Node* current = stack->top;
    int position = 1;
    while (current != NULL) {
        if (current->data == key) {
            return position;
        }
        current = current->next;
        position++;
    }
    return -1;
}

void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return;
    }
    struct Node* current = stack->top;
    printf("Stack elements: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Stack stack;
    initializeStack(&stack);

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);

    display(&stack);

    printf("Top element: %d\n", peek(&stack));

    pop(&stack);
    pop(&stack);

    display(&stack);

    printf("Top element: %d\n", peek(&stack));

    int searchKey = 20;
    int position = search(&stack, searchKey);
    if (position != -1) {
        printf("Element %d found at position %d\n", searchKey, position);
    } else {
        printf("Element %d not found\n", searchKey);
    }

    return 0;
}
